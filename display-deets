#!/bin/bash
# xrandr, xdotool, xwininfo, xwininfo, Bash >= v4

get_displays_summary(){
    # eDP-1 is laptop, DP-1 and DP-2 are HDMI displays
    summaryOfDisplays=$(xrandr -q | grep -i " connected ")
    echo "$summaryOfDisplays"
}

get_displays_dimensions(){
    displays$(get_displays_summary)
    # convert to array, split on newline
    SAVEIFS=$IFS; IFS=$'\n'
    displays=($displays)
    IFS=$SAVEIFS
    # create an associative array to store dimensions (value) for each display (key)
    # https://stackoverflow.com/questions/1494178/how-to-define-hash-tables-in-bash/3467959#3467959
    # the array isn't used .. leaving it for reference
    declare -A dimensions # associative array
    for d in "${displays[@]}"
    do
        d=$(echo "$d" | sed 's|primary ||g')
        name=$(echo "${d}" | cut -d ' ' -f 1)
        dims=$(echo "${d}" | cut -d ' ' -f 3)
        echo "${name} ${dims}"
        dimensions["${name}"]="${dims}" # add each to array
    done
    #echo keys: "${!dimensions[@]}"
    #echo vals: "${dimensions[@]}"
}

get_displays_xmin_xmax(){
    displays=$(get_displays_summary)
    # convert to array, split on newline
    SAVEIFS=$IFS; IFS=$'\n'
    displays=($displays)
    IFS=$SAVEIFS
    for d in "${displays[@]}"
    do
        d=$(echo "$d" | sed 's|primary ||g')
        name=$(echo "${d}" | cut -d ' ' -f 1)
        dims=$(echo "${d}" | cut -d ' ' -f 3)
        xmin=$(echo $dims | cut -d '+' -f 2)
        next=$(echo $dims | cut -d 'x' -f 1)
        xmax=$(($xmin + $next))
        echo "${name} ${xmin} ${xmax}"
    done
}

get_displays_ymin_ymax(){
    displays=$(get_displays_summary)
    # convert to array, split on newline
    SAVEIFS=$IFS; IFS=$'\n'
    displays=($displays)
    IFS=$SAVEIFS
    for d in "${displays[@]}"
    do
        d=$(echo "$d" | sed 's|primary ||g')
        name=$(echo "${d}" | cut -d' ' -f1)
        dims=$(echo "${d}" | cut -d' ' -f3)
        ymin=$(echo $dims | cut -d'+' -f3)
        ymax=$(echo $dims | cut -d'x' -f2 | cut -d '+' -f1)
        #ymax=$(($ymin + $next))
        echo "${name} ${ymin} ${ymax}"
    done
}

get_number_of_displays(){
    numberOfDisplays=$(get_displays_summary | wc -l)
    echo $numberOfDisplays
}

get_cursor_terse(){
    # xdotool getmouselocation: x:2718 y:452 screen:0 window:62914564
    # strip to this: 2718 452 0 62914564
	cursorBrief=$(xdotool getmouselocation | sed 's|[a-z]||g' | sed 's|:||g')
    echo $cursorBrief
}

get_mouse_xy(){
    cursorX=$(get_cursor_terse | cut -d ' ' -f 1)
    cursorY=$(get_cursor_terse | cut -d ' ' -f 2)
    echo $cursorX $cursorY
}

get_mouse_window_details(){
    # includes upper-left XY and dimensions
    mouseWindowId=$(get_cursor_terse | cut -d ' ' -f 4)
    details=$(xwininfo -id ${mouseWindowId})
    echo "$details"
}

get_active_window_details(){
    # includes upper-left XY and dimensions
    details=$(xwininfo -id $(xdotool getactivewindow))
    echo "$details"
}


show_usage(){
    me=$(basename "$0")
    echo
    echo " $me [ options ]"
    echo 
    echo " -s   xrandr's summary of connected displays"
    echo " -d   only dimensions for all displays" 
    echo " -n   total number of connected displays"
    echo " -x   min and max x for each display"
    echo " -y   min and max  for each display"
    echo " -p   x and y position of mouse cursor"
    echo " -m   details of mouse window (ie. under mouse cursor)"
    echo " -w   details of active window (ie currently selected)"
    #echo " -t   sum total width of all displays"
    #echo " -z   zero / origin position of display of current mouse position"
    echo
    echo Dependencies: xrandr, xdotool, xwininfo, Bash >= v4
    echo
    exit 1
}

# if no arguments are provided ...
if [ $# -eq 0 ];
then
    show_usage
    exit 0
fi

while getopts ":sdnxypmw" opt; do  # update as cases are added
    case ${opt} in
        s) get_displays_summary
            ;;
        d) get_displays_dimensions
            ;;
        n) get_number_of_displays
            ;;
        x) get_displays_xmin_xmax
            ;;
        y) get_displays_ymin_ymax
            ;;
        p) get_mouse_xy
            ;;
        m) get_mouse_window_details
            ;;
        w) get_active_window_details
            ;;
        \? ) show_usage 1>&2
            ;; # show usage if options above aren't provided
    esac
done

# keeping for reference .. for now
zget_displayDetails(){
    displayDetails=$(xrandr -q | grep -i " connected ")
    dLdims=$(get_displayDimensionsLeft)
    dRdims=$(get_displayDimensionsRight)
    # https://unix.stackexchange.com/questions/9784/how-can-i-read-line-by-line-from-a-variable-in-bash
    # while read -r l; do echo -- $l; done <<< "$(echo $displayDetails | sed  's|[0-9]*mm x [0-9]*mm|\n|g')"
    while read -r line
    do 
        #echo $line
        if echo "$line" | grep -q "$dLdims"
        then 
            dL=$(echo $line | grep "$dLdims")
            #echo L: $dL
        fi
        if echo "$line" | grep -q "$dRdims"
        then 
            dR=$(echo $line | grep "$dRdims")
            #echo R: $dR
        fi
    done <<< "$(echo $displayDetails | sed  's|[0-9]*mm x [0-9]*mm|\n|g')"
    echo "LEFT:  " $dL
    echo "RIGHT: " $dR
    #echo "$displayDetails"
}

zget_displayDimensionsLeft(){
    dL=$(xrandr | grep -w connected | sed -n '/[0-9]*+0+/p')
    dims=$(echo $dL | grep -o "[0-9]\+x[0-9]\+")
    echo $dims
}

zget_zeroPosition(){
    mouseX=$(get_mouseX)
    mouseY=$(get_mouseY)
    numDisplays=$(get_number_of_displays)
    zeroPositionX=0
    # assumes maximum two displays
    comparePositionX=$(get_displayDimensions | cut -d 'x' -f 1)

    if (( $numDisplays > 1 && $numDisplays < 3)) 
    then
        if (( $mouseX > $comparePositionX ))
        then
            zeroPositionX=$(get_displayDimensions | cut -d 'x' -f 1)
            zeroPositionX=$(expr $zeroPositionX + 5)
        else
            #zeroPositionX=0
            zeroPositionX=$(expr 0 + 5)
        fi
    fi

    echo $zeroPositionX

    #for d in $(get_displayDimensions)
    #do
        #xWidth=$(echo $d | cut -d 'x' -f 1)
        #if (( $mouseX >= $d && $mouseX <= ))
            ##zeroPositionX=
        #fi
    #done

}

