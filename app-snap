#!/bin/bash
# dependencies: display-deets, wmctrl

# "alias" for display-deets
deets(){
    display-deets "$@" # catch command options with $@
}

# get details on active window
# pipe through xargs to remove leading/trailing whitespace
window_ulx=$(deets -w | grep "Absolute upper-left X" | cut -d':' -f2 | xargs)
window_uly=$(deets -w | grep "Absolute upper-left Y" | cut -d':' -f2 | xargs)
echo "window_ulx $window_ulx"
echo "window_uly $window_uly"
window_szx=$(deets -w | grep "Width" | cut -d':' -f2 | xargs)
window_szy=$(deets -w | grep "Height" | cut -d':' -f2 | xargs)
echo "window_szx $window_szx"
echo "window_szy $window_szy"
window_ctx=$(( $window_ulx + ($window_szx / 2) ))
window_cty=$(( $window_uly + ($window_szy / 2) ))
echo "window_ctx $window_ctx"
echo "window_cty $window_cty"

# get display dimensions
display_xdims=$(deets -x)
display_ydims=$(deets -y)
# convert to array, split on newline
SAVEIFS=$IFS; IFS=$'\n'
display_xdims=($display_xdims)
display_ydims=($display_ydims)
IFS=$SAVEIFS

# determine display in which the CENTER of the active window falls
i=0 # index to access elements in display_ydims array
for x in "${display_xdims[@]}" # loop over array
do
    x=($x) # convert to an array, split on spaces
    display_xmin=${x[1]}; display_xmax=${x[2]}
    y=(${display_ydims[$i]})
    display_ymin=${y[1]}; display_ymax=${y[2]}
    
    if (( $window_ctx > $display_xmin && $window_ctx < $display_xmax ))
    then
        active_display_name=${x[0]}
        break
    fi
    i=$(( $i+1 ))
done

# window snap options

# snap right side, but keep same window size:
#       app-snap right 

# snap left side, resize to 1/2 display width, full height
#       app-snap left 1/2 

# snap center, resize to 2/3 display width, full height
#       app-snap center 2/3 

display_ymax=$(( $display_ymax - 40 )) # leave space below windows

# if window is taller than display ...
# then set height to equal display y dimension
check_window_szy(){
    if (( $window_szy > $display_ymax )); then
        window_szy=$display_ymax
    fi
}

# set size based on scalar that is provided as second arg
# i.e. 1/2, 2/3, etc
set_window_size(){
    scalar=$2
    echo scalar: $2
    if [[ $scalar ]]; then
        window_szx=$(( ($display_xmax - $display_xmin) * $scalar ))
        window_szy=$display_ymax
    fi
    echo set_window_size: $scalar $window_szx
}

# set position using args sent from case statement
set_window_position(){
    check_window_szy
    new_position_x=$1; new_position_y=$2
    wmctrl -r :ACTIVE: -e 0,$new_position_x,$new_position_y,$window_szx,$window_szy
    echo wmctrl -r :ACTIVE: -e 0,$new_position_x,$new_position_y,$window_szx,$window_szy
}

# manage arguments
case "$1" in
    "left"*)
    echo snap: $1
    set_window_size $1 $2
    set_window_position $display_xmin $display_ymin
    ;;
    *"right"*)
    echo snap: $1
    set_window_size $1 $2
    set_window_position $(($display_xmax - $window_szx)) $display_ymin
    ;;
    *"center"*)
    echo snap: $1 
    set_window_size $1 $2
    new_position_x=$(( (($display_xmax - $display_xmin) / 2) + $display_xmin )) # get center position
    new_position_x=$(( $new_position_x - ($window_szx / 2) )) # shift left by 1/2 window width
    set_window_position $new_position_x $display_ymin
    ;;
    *)
    echo $1 is not an valid snap option
    exit 1
esac

echo $window_szx, $window_szy










